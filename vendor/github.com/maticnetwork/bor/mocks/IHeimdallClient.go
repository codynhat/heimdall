// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	bor "github.com/maticnetwork/bor/consensus/bor"
	mock "github.com/stretchr/testify/mock"
)

// IHeimdallClient is an autogenerated mock type for the IHeimdallClient type
type IHeimdallClient struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: paths
func (_m *IHeimdallClient) Fetch(paths ...string) (*bor.ResponseWithHeight, error) {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bor.ResponseWithHeight
	if rf, ok := ret.Get(0).(func(...string) *bor.ResponseWithHeight); ok {
		r0 = rf(paths...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bor.ResponseWithHeight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(paths...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchWithRetry provides a mock function with given fields: paths
func (_m *IHeimdallClient) FetchWithRetry(paths ...string) (*bor.ResponseWithHeight, error) {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bor.ResponseWithHeight
	if rf, ok := ret.Get(0).(func(...string) *bor.ResponseWithHeight); ok {
		r0 = rf(paths...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bor.ResponseWithHeight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(paths...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
